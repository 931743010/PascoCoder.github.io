<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pasco's blog]]></title>
  <subtitle><![CDATA[subtitle]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pascocoder.github.io/"/>
  <updated>2016-02-11T07:24:45.000Z</updated>
  <id>http://pascocoder.github.io/</id>
  
  <author>
    <name><![CDATA[Pasco]]></name>
    <email><![CDATA[pascocoder@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[set custom domain at github pages with hexo]]></title>
    <link href="http://pascocoder.github.io/2016/02/11/set-custom-domain-at-github-pages-with-hexo/"/>
    <id>http://pascocoder.github.io/2016/02/11/set-custom-domain-at-github-pages-with-hexo/</id>
    <published>2016-02-11T07:24:45.000Z</published>
    <updated>2016-02-11T07:24:45.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用XPath从网页中提取数据]]></title>
    <link href="http://pascocoder.github.io/2016/02/07/Use-XPath/"/>
    <id>http://pascocoder.github.io/2016/02/07/Use-XPath/</id>
    <published>2016-02-07T08:35:55.000Z</published>
    <updated>2016-02-07T08:42:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="XPath">XPath</h1><h2 id="简介">简介</h2><p>XPath 是一门在 XML/HTML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>
<h2 id="语法">语法</h2><h5 id="选取节点">选取节点</h5><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>nodename</td>
<td>选取此节点下所有的子节点</td>
</tr>
<tr>
<td>/</td>
<td>从根节点下选取</td>
</tr>
<tr>
<td>//</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑他们的位置</td>
</tr>
<tr>
<td>.</td>
<td>选择当前的节点</td>
</tr>
<tr>
<td>..</td>
<td>选择当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
</tr>
</tbody>
</table>
<h5 id="实例">实例</h5><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>bookstore</td>
<td>选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td>/bookstore</td>
<td>选取根元素 bookstore。</td>
</tr>
<tr>
<td></td>
<td>注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td>bookstore/book</td>
<td>选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td>//book</td>
<td>选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td>bookstore//book</td>
<td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td>//@lang</td>
<td>选取名为 lang 的所有属性。</td>
</tr>
</tbody>
</table>
<h5 id="谓语">谓语</h5><table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>/bookstore/book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()-1]</td>
<td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[position()&lt;3]</td>
<td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td>//title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td>//title[@lang=’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]</td>
<td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]/title</td>
<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody>
</table>
<h5 id="选取未知节点">选取未知节点</h5><table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>/bookstore/*</td>
<td>选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td>//*</td>
<td>选取文档中的所有元素。</td>
</tr>
<tr>
<td>//title[@*]</td>
<td>选取所有带有属性的 title 元素。</td>
</tr>
</tbody>
</table>
<h5 id="选择若干路径">选择若干路径</h5><table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>//book/title 管道符（竖杠） //book/price</td>
<td>选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>//title 管道符 //price</td>
<td>选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>/bookstore/book/title 管道符 //price</td>
<td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="XPath">XPath</h1><h2 id="简介">简介</h2><p>XPath 是一门在 XML/HTML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>
<h2 id="语法">语法</h2><h5 id="]]>
    </summary>
    
      <category term="XPath" scheme="http://pascocoder.github.io/tags/XPath/"/>
    
      <category term="爬虫" scheme="http://pascocoder.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="爬虫" scheme="http://pascocoder.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《图解HTTP》读书笔记]]></title>
    <link href="http://pascocoder.github.io/2016/02/03/%E5%9B%BE%E8%A7%A3HTTP-reading-notes/"/>
    <id>http://pascocoder.github.io/2016/02/03/图解HTTP-reading-notes/</id>
    <published>2016-02-03T12:06:05.000Z</published>
    <updated>2016-02-06T17:29:15.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作的。而 HTTP 属于它内部的一个子集。</li>
<li>TCP/IP分4层：应用层、传输层、网络层、数据链路层。</li>
<li>应用层：应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务。比如，<strong>FTP（File Transfer Protocol，文件传输协议）</strong>和 <strong>DNS（Domain Name System，域名系统）</strong>服务就是其中两类。<strong>HTTPH协议也处于该层。</strong></li>
<li>传输层：传输层对上层应用层提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：<strong>TCP（Transmission Control Protocol，传输控制协议）</strong>和 <strong>UDP（User Data Protocol，用户数据报协议）</strong>。</li>
<li>网络层：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方的计算机，并把数据包传送给对方。与对方计算机通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多选项中选择一条传输路线。</li>
<li>链路层：用来处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，网卡，及光纤等物理可见部分。硬件上的范畴均在链路层的作用范围之内。<img src="http://7xqqt8.com1.z0.glb.clouddn.com/TCP%2FIP%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93%E6%B5%81.png" alt="TCP/IP通信传输流"></li>
<li><strong>IP协议位于网络层</strong>，作用是把各种数据包传送给对方，而要确保传送到对方那里，需要两个重要的条件是IP地址和MAC地址。</li>
<li>TCP三次握手：发送端首先会发送一个带有SYN标志的数据包给对方，接收方接收后回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端在回传一个带有ACK标志的数据包表示握手结束。若握手过程中某个阶段莫名终止，TCP协议会再次以相同的顺序发送相同的数据包。<img src="http://7xqqt8.com1.z0.glb.clouddn.com/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP三次握手"></li>
<li>负责解析域名的DNS服务<img src="http://7xqqt8.com1.z0.glb.clouddn.com/DNS%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D.png" alt=""></li>
<li>HTTP协议是不保存状态的，即无状态协议。协议对于发过的请求和响应都不做持久化处理。</li>
<li>GET:获取资源。POST:用来传输实体的主题。HEAD:用来获取报文的首部。OPTIONS:查询可用方法。TRACE:追踪路径。CONNECT:要求用隧道协议连接代理。</li>
<li>持久连接:进行一次TCP连接后进行多次请求和响应。管线化:同时并行发出多个请求，不需要一个接一个的等待响应。</li>
<li>使用Cookie的状态管理:Cookie会根据服务器发送的响应报文中的Set_Cookie的首部字段信息，通知客户端保存Cookie，当下次客户端再往服务器端发送请求时，会在请求报文的首部加入Cookie。<img src="http://7xqqt8.com1.z0.glb.clouddn.com/Cookie%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="Cookie工作原理"></li>
<li>获取部分内容的范围请求(Range Request):断点续传，利用首部的Range来指定资源的byte范围</li>
<li>内容协商:根据请求报文的首部字段判断。Accept，Accept-Charset，Accept-Encoding，Accept-language，Content-Language。</li>
<li>HTTP状态码:1XX，信息性状态码，接收的请求正在处理。2XX，成功状态码，请求正常处理完毕。3XX，重定向状态码，需要进行附加操作以完成请求。4XX，客户端错误状态码，服务器无法处理请求。5XX，服务器错误状态码，服务器处理请求出错。</li>
<li>缓存:代理服务器或客户端保存的资源副本。</li>
<li>HTTP首部字段的含义。（原书第6章）</li>
<li>HTTP缺点：使用明文通信，内容可能会被窃听；不验证通信方的身份，有可能遭遇伪装；无法证明报文的完整性，有可能内容已经被篡改。</li>
<li>HTTPS是在HTTP的通信接口部分用SSL或TSL协议代替<img src="http://7xqqt8.com1.z0.glb.clouddn.com/HTTP%E5%92%8CHTTPS.png" alt=""></li>
<li>WebSocket:客户端和服务器之间全双工通信标准。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作的。而 HTTP 属于它内部的一个子集。</li>
<li>TCP/IP分4层：应用层、传输层、网络层、数据链路层。</li>
<li>应用层：应用层决定了向用户提供应用服务时通信的活动。TCP/]]>
    </summary>
    
      <category term="HTTP" scheme="http://pascocoder.github.io/tags/HTTP/"/>
    
      <category term="读书笔记" scheme="http://pascocoder.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="reading notes" scheme="http://pascocoder.github.io/categories/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pyhton爬虫框架scrapy]]></title>
    <link href="http://pascocoder.github.io/2016/02/01/python-scrapy-1/"/>
    <id>http://pascocoder.github.io/2016/02/01/python-scrapy-1/</id>
    <published>2016-02-01T03:42:39.000Z</published>
    <updated>2016-02-20T14:55:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概要">概要</h1><ol>
<li>用来抓取info.xidian.edu.cn上的新闻</li>
<li>下载图片</li>
<li>利用redis去除已经之前已经爬过的URL，实现增量爬取网页</li>
</ol>
<h2 id="项目地址">项目地址</h2><p><a href="https://github.com/PascoCoder/XidianInfo" target="_blank" rel="external">https://github.com/PascoCoder/XidianInfo</a></p>
<h2 id="参考文档">参考文档</h2><p><a href="http://scrapy-chs.readthedocs.org/zh_CN/1.0/index.html" target="_blank" rel="external">scrapy中文文档</a></p>
<p>感谢：<a href="http://www.fengxiaochuang.com/?p=144" target="_blank" rel="external">博客</a></p>
<h2 id="安装">安装</h2><p>基本上就是一条命令<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> scrapy</span><br></pre></td></tr></table></figure></p>
<h2 id="创建项目">创建项目</h2><p>输入命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject tutorial</span><br></pre></td></tr></table></figure></p>
<p>会出现一个tutorial的目录，目录结构如下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy<span class="class">.cfg</span></span><br><span class="line">    tutorial/					</span><br><span class="line">        __init__<span class="class">.py</span>			</span><br><span class="line">        items<span class="class">.py</span></span><br><span class="line">        pipelines<span class="class">.py</span></span><br><span class="line">        settings<span class="class">.py</span></span><br><span class="line">        spiders/</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure></p>
<ol>
<li>scrapy.cfg:部署配置文件</li>
<li>items.py:项目items文件，定义字典的字段</li>
<li>pipeline.py:项目管道文件，用于后续处理</li>
<li>settings.py:项目设置文件</li>
<li>spider/:用来放爬虫的目录</li>
</ol>
<p>自己添加的文件：</p>
<ol>
<li>middlewares.py:下载中间件，位置与settings.py在同一目录下，或者放在新建middleware文件夹内</li>
</ol>
<h2 id="定义item">定义item</h2><p>item是保存爬取到的数据的容器，使用方法类似于Python中的字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    link = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br></pre></td></tr></table></figure></p>
<h2 id="第一个爬虫">第一个爬虫</h2><p>Spider是从<strong>单一网站</strong>上爬去数据的类。<br>为了创建一个Spider，您必须继承 <code>scrapy.Spider</code> 类， 且定义一些属性:</p>
<ol>
<li><code>name</code>: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>
<li><code>start_urls</code>: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>
<li><code>parse()</code> 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。<br>以下为我们的第一个Spider代码，保存在 tutorial/spiders 目录下的 dmoz_spider.py 文件中:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        filename = response.url.split(<span class="string">"/"</span>)[-<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>切换到工程的根目录，执行命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl dmoz</span><br></pre></td></tr></table></figure></p>
<p>会发现工程内多了一个文件，即请求到的结果。</p>
<h3 id="代码含义解释：">代码含义解释：</h3><p>Scrapy为Spider的 <code>start_urls</code> 属性中的每个URL创建了 <code>scrapy.Request</code> 对象，并将 <code>parse</code> 方法作为回调函数(callback)赋值给了Request。</p>
<p>Request对象经过调度，执行生成 scrapy.http.Response 对象并送回给spider parse() 方法。</p>
<h3 id="处理请求结果">处理请求结果</h3><p>从网页中提取数据，这里介绍<a href="/2016/02/07/Use-XPath/">XPath方法</a></p>
<h3 id="最终的样子">最终的样子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> DmozItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</span><br><span class="line">            item = DmozItem()</span><br><span class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/text()'</span>).extract()</span><br><span class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</span><br><span class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'text()'</span>).extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<h2 id="Spiders">Spiders</h2><p>Spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</p>
<p>scrapy提供了多种Spider</p>
<h3 id="scrapy-Spider">scrapy.Spider</h3><p><code>scrapy.Spider</code>:最简单的spider，Spider并没有提供什么特殊的功能。 其仅仅提供了 start_requests() 的默认实现，读取并请求spider属性中的 start_urls, 并根据返回的结果(resulting responses)调用spider的 parse 方法。如上面的那个例子。</p>
<h3 id="CrawlSpider">CrawlSpider</h3><p><code>CrawlSpider</code>:爬取一般网站常用的spider。其定义了一些规则(rule)来提供跟进link的方便的机制。 也许该spider并不是完全适合特定网站或项目，但其对很多情况都使用。</p>
<ol>
<li><code>rules</code>:一个包含一个(或多个) Rule 对象的集合(list)。 每个 Rule 对爬取网站的动作定义了特定表现。 Rule对象在下边会介绍。 如果多个rule匹配了相同的链接，则根据他们在本属性中被定义的顺序，第一个会被使用。</li>
<li><code>parse_start_url(response)</code>:该spider也提供了一个可复写(overrideable)的方法。当start_url的请求返回时，该方法被调用。 该方法分析最初的返回值并必须返回一个 Item 对象或者 一个 Request 对象或者 一个可迭代的包含二者对象。</li>
</ol>
<h4 id="爬取规则：">爬取规则：</h4><p><code>link_extractor</code> 是一个 Link Extractor 对象。 其定义了如何从爬取到的页面提取链接。</p>
<p><code>callback</code> 是一个callable或string(该spider中同名的函数将会被调用)。 从link_extractor中每获取到链接时将会调用该函数。该回调函数接受一个response作为其第一个参数， 并返回一个包含 Item 以及(或) Request 对象(或者这两者的子类)的列表(list)。</p>
<blockquote>
<p>警告</p>
<p>当编写爬虫规则时，请避免使用 parse 作为回调函数。 由于 CrawlSpider 使用 parse 方法来实现其逻辑，如果 您覆盖了 parse 方法，crawl spider 将会运行失败。</p>
</blockquote>
<p><code>cb_kwargs</code> 包含传递给回调函数的参数(keyword argument)的字典。</p>
<p><code>follow</code> 是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进。 如果 callback 为None， follow 默认设置为 True ，否则默认为 False 。</p>
<p><code>process_links</code> 是一个callable或string(该spider中同名的函数将会被调用)。 从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。</p>
<p><code>process_request</code> 是一个callable或string(该spider中同名的函数将会被调用)。 该规则提取到每个request时都会调用该函数。该函数必须返回一个request或者None。 (用来过滤request)</p>
<h4 id="CrawlSpider样例">CrawlSpider样例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'example.com'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.example.com'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># 提取匹配 'category.php' (但不匹配 'subsection.php') 的链接并跟进链接(没有callback意味着follow默认为True)</span></span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">'category\.php'</span>, ), deny=(<span class="string">'subsection\.php'</span>, ))),</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取匹配 'item.php' 的链接并使用spider的parse_item方法进行分析</span></span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">'item\.php'</span>, )), callback=<span class="string">'parse_item'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.logger.info(<span class="string">'Hi, this is an item page! %s'</span>, response.url)</span><br><span class="line"></span><br><span class="line">        item = scrapy.Item()</span><br><span class="line">        item[<span class="string">'id'</span>] = response.xpath(<span class="string">'//td[@id="item_id"]/text()'</span>).re(<span class="string">r'ID: (\d+)'</span>)</span><br><span class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//td[@id="item_name"]/text()'</span>).extract()</span><br><span class="line">        item[<span class="string">'description'</span>] = response.xpath(<span class="string">'//td[@id="item_description"]/text()'</span>).extract()</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<p>该spider将从example.com的首页开始爬取，获取category以及item的链接并对后者使用 parse_item 方法。 当item获得返回(response)时，将使用XPath处理HTML并生成一些数据填入 Item 中。</p>
<h2 id="Pipeline">Pipeline</h2><p>注意：pipelines需要在settings.py中启用</p>
<p>当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。<br>以下是item pipeline的一些典型应用：</p>
<ol>
<li>清理HTML数据</li>
<li>验证爬取的数据(检查item包含某些字段)</li>
<li>下载图片</li>
<li>查重(并丢弃)</li>
<li>将爬取结果保存到数据库中</li>
</ol>
<h3 id="样例">样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    collection_name = <span class="string">'scrapy_items'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_uri = mongo_uri</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DATABASE'</span>, <span class="string">'items'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.db[self.collection_name].insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<p>写好后需要在<code>settings.py</code>中启用你写好的Item Pipeline组件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'myproject.pipelines.PricePipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">'myproject.pipelines.JsonWriterPipeline'</span>: <span class="number">800</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。</p>
<h3 id="下载图片">下载图片</h3><p><a href="http://doc.scrapy.org/en/1.0/topics/media-pipeline.html" target="_blank" rel="external">scrapy自带的图片下载的pipelines</a>会根据图片链接的hash值会重新命名图片的名称，如果对图片名称没要求的话可以使用</p>
<p>所以我选择了自己重新写一个pipelines用来下载图片，代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'image_urls'</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">for</span> image_url <span class="keyword">in</span> item[<span class="string">'image_urls'</span>]:</span><br><span class="line">                image_path = image_url.replace(<span class="string">'http://info.xidian.edu.cn/'</span>,<span class="string">''</span>)</span><br><span class="line">                image_folder_url_list = image_path.split(<span class="string">'/'</span>)[:-<span class="number">1</span>]</span><br><span class="line">                image_folder_path = <span class="string">'/'</span>.join(image_folder_url_list) + <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_folder_path):</span><br><span class="line">                    os.makedirs(image_folder_path)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">                    <span class="keyword">with</span> open(image_path,<span class="string">'wb'</span>) <span class="keyword">as</span> handle:</span><br><span class="line">                        response = requests.get(image_url, stream=<span class="keyword">True</span>)</span><br><span class="line">                        <span class="keyword">for</span> block <span class="keyword">in</span> response.iter_content(<span class="number">1024</span>):</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">not</span> block:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            handle.write(block)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<h2 id="下载中间件（middlewares）">下载中间件（middlewares）</h2><p>在此部分用redis去重复</p>
<p>可以实现一下三个方法</p>
<h3 id="process_request(request,_spider)">process_request(request, spider)</h3><p>当每个request通过下载中间件时，该方法被调用。</p>
<p>process_request() 必须返回其中之一: 返回 None 、返回一个 Response 对象、返回一个 Request 对象或raise IgnoreRequest 。</p>
<p>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</p>
<p>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</p>
<p>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</p>
<p>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p>
<h3 id="process_response(request,_response,_spider)">process_response(request, response, spider)</h3><p>process_request() 必须返回以下之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。</p>
<p>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</p>
<p>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</p>
<p>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p>
<h3 id="process_exception(request,_exception,_spider)">process_exception(request, exception, spider)</h3><p>当下载处理器(download handler)或 process_request() (下载中间件)抛出异常(包括 IgnoreRequest 异常)时， Scrapy调用 process_exception() 。</p>
<p>process_exception() 应该返回以下之一: 返回 None 、 一个 Response 对象、或者一个 Request 对象。</p>
<p>如果其返回 None ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 process_exception() 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。</p>
<p>如果其返回一个 Response 对象，则已安装的中间件链的 process_response() 方法被调用。Scrapy将不会调用任何其他中间件的 process_exception() 方法。</p>
<p>如果其返回一个 Request 对象， 则返回的request将会被重新调用下载。这将停止中间件的 process_exception() 方法执行，就如返回一个response的那样。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> IgnoreRequest</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomDownloaderMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.r = redis.Redis(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.r.exists(request.url):</span><br><span class="line">            <span class="keyword">raise</span> IgnoreRequest(<span class="string">"request is exists"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p>
<h2 id="todos">todos</h2><ol>
<li>新建一个pipelines来下载附件</li>
<li>爬取到的item存入数据库</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概要">概要</h1><ol>
<li>用来抓取info.xidian.edu.cn上的新闻</li>
<li>下载图片</li>
<li>利用redis去除已经之前已经爬过的URL，实现增量爬取网页</li>
</ol>
<h2 id="项目地址">项目地址</]]>
    </summary>
    
      <category term="python" scheme="http://pascocoder.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="http://pascocoder.github.io/tags/scrapy/"/>
    
      <category term="python" scheme="http://pascocoder.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[寒假计划]]></title>
    <link href="http://pascocoder.github.io/2016/01/30/holiday-plans/"/>
    <id>http://pascocoder.github.io/2016/01/30/holiday-plans/</id>
    <published>2016-01-30T14:50:20.000Z</published>
    <updated>2016-02-01T03:23:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="回家">回家</h3><p>将近30天的寒假已经开始，回家也有两三天了。吃饱喝足之后，开始规划寒假的任务。</p>
<h3 id="任务">任务</h3><ol>
<li>放假是刚刚接触到ReactiveCocoa，到现在也看了一部分的入门介绍，基本明白了reactive的思想，还差实践。</li>
<li>放假前面基一个朋友，推荐我看<a href="http://book.douban.com/subject/25863515/" target="_blank" rel="external">图解HTTP</a>，下载了电子书，寒假看完希望能有个系统的认识。</li>
<li>3月份就开始实习的面试了，面试宝典、算法之类的必看，我带回来的<a href="http://book.douban.com/subject/6966465/" target="_blank" rel="external">剑指offer</a>，希望寒假能多读几遍。开始我的<a href="https://leetcode.com/" target="_blank" rel="external">Leecode</a>刷题之旅。</li>
<li>iOS的只是还是温故而知新。一边看书籍温习旧知识，一边github上star新知识。有时间最好看看师兄的代码。</li>
<li>老师给我布置的寒假任务，虽说不想做，担忧不得不做，尽快完成吧：1、爬虫抓取一个新闻网站的新闻数据，这个我准备用Python的scrapy来做。2、开始看之前留下来的西电导航iOS源代码，试着修复一些模块。</li>
<li>我要试着抛弃我纯代码构建界面的习惯，多用storyboard和xib文件。这样做起来效率高些</li>
<li>寒假其实挺想找个人一起做东西的，但是没有合适的人。</li>
</ol>
<h3 id="具体实施">具体实施</h3><p>1.31 &amp; 2.1    学习scrapy，爬虫抓数据。学习资源：YouTube视频，官方文档，中文文档，博客</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="回家">回家</h3><p>将近30天的寒假已经开始，回家也有两三天了。吃饱喝足之后，开始规划寒假的任务。</p>
<h3 id="任务">任务</h3><ol>
<li>放假是刚刚接触到ReactiveCocoa，到现在也看了一部分的入门介绍，基本明白了reac]]>
    </summary>
    
      <category term="计划" scheme="http://pascocoder.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="随想" scheme="http://pascocoder.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="个人随想" scheme="http://pascocoder.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objective-c runtime]]></title>
    <link href="http://pascocoder.github.io/2016/01/15/objective-c-runtime/"/>
    <id>http://pascocoder.github.io/2016/01/15/objective-c-runtime/</id>
    <published>2016-01-15T07:31:57.000Z</published>
    <updated>2016-01-15T09:13:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="runtime">runtime</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="runtime">runtime</h1>]]>
    </summary>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="runtime" scheme="http://pascocoder.github.io/tags/runtime/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/categories/objective-c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年度总结]]></title>
    <link href="http://pascocoder.github.io/2016/01/01/Annual-Summary-2015/"/>
    <id>http://pascocoder.github.io/2016/01/01/Annual-Summary-2015/</id>
    <published>2016-01-01T08:53:42.000Z</published>
    <updated>2016-01-01T17:00:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="逝去的2015">逝去的2015</h1><h2 id="学习">学习</h2><p>记得2015年刚开始的时候，面对的眼花缭乱的技术，心中特别激动。想要全部学会，做一个全栈的程序员。现在回想自己的年少无知还是会觉得幼稚可笑。殊不知这么多的编程语言，每个编程语言有涉及到茫茫多的框架和类库，光是哪些浩如烟海的文档，都让我看不完。人的精力是有限的，做完PHP项目做Android项目，做完Android做python，做了一个就忘了另外一个，干到头也是一场空，最后学的不伦不类。</p>
<p>2015年的第一季度，我一直在PHP、Android、Python的门外游荡，都想学但又都没有精力，蹉跎岁月，惶惶终日。在实验室做一些拿不出手的小作品，水平也一直都是入门级别，没有进展。</p>
<p>现在想想可能不愿意承认，看到同学使用的MAC系统如此的优雅，于是也萌生了购买MAC笔记本电脑吧，最后我选择了学习iOS编程。算是我学习iOS的第一笔费用吧。毕竟8000元钱的东西，爸爸妈妈对这个又不是很了解。平时除了生活费我也羞于向家里要钱，没想到刚跟妈妈一说她就答应买了，那一晚上挂完电话后我哭的特别伤心。于是下决心好好学习iOS，早日把成本挣回来。</p>
<p>刚开始的时候跟着慕课网学了几周，发现这个网站上的资源讲的很不系统，有些东西就是为了博人眼球，于是我抛弃了这个华而不实的地方。有一天逛CocoaChina的时候，看到一个哥们写自己的学习历程。于是我找的了李明杰老师的视频，李明杰老师讲课很有激情，思路逻辑清晰。我反复看了几遍，受益匪浅。</p>
<p>网上的资源虽然新颖，但是分散，要想系统的学习一门技术，还是要看书。我从豆瓣上精选了三本书籍，暑假没有回家，专心学习。</p>
<ol>
<li><a href="http://book.douban.com/subject/19962787/" target="_blank" rel="external">objective-c 编程</a></li>
<li><a href="http://book.douban.com/subject/26287812/" target="_blank" rel="external">iOS编程</a></li>
<li><a href="http://book.douban.com/subject/25976913/" target="_blank" rel="external">iOS编程实战</a></li>
<li><a href="http://book.douban.com/subject/25829244/" target="_blank" rel="external">effective objective-c</a></li>
<li><a href="http://book.douban.com/subject/26287173/" target="_blank" rel="external">iOS开发进阶</a></li>
</ol>
<p>看完了前两本书，并且把书上的例子敲了一遍，感觉自己算是入门者了，于是到github上找一些自己感兴趣的项目，读读源码。选中了[v2ex的客户端](<a href="https://github.com/singro/v2ex)。虽说看完了两本书，但是对于读源码还是特别吃力。看了很久耐心调试才慢慢摸索出来。可以说，我现在的编程风格依然受这位大神的影响。在此谢过。" target="_blank" rel="external">https://github.com/singro/v2ex)。虽说看完了两本书，但是对于读源码还是特别吃力。看了很久耐心调试才慢慢摸索出来。可以说，我现在的编程风格依然受这位大神的影响。在此谢过。</a></p>
<p>10月份师兄邀请我加入他们的团队，帮助他完成毕业设计。其实是老师从外面接到的一个外包项目作为师兄的毕业设计。因为师兄在美团实习了很久，回来后时间上已经来不及做完了，我一开始担心我的编程能力<br>不足以完成这个项目。在师兄的再三邀请下我决定跟着师兄还有一个师弟好好地做这个项目。这段时间我们三个人合作开发，是我今年最开心的一段时光。在师兄的鼓励和耐心教导下，我完成了我一开始不敢想象的项目。谢谢师兄带我真正的走进iOS开发的大门，第一次让我觉得我也可以很棒！</p>
<p>11月份和另一个人合作做了另一个外包项目，同样是因为他开发时间不够来邀请我加入的。在这个项目中，我对iOS的理解更深了一点。而且也获得了第一桶金。</p>
<p>2015年我最大的收获就是获得了学习一样技术一套正确的方法论。如何到网上搜索资源。社区的重要性。等等</p>
<h2 id="生活">生活</h2><p>2015年有太多需要反思，不好的生活习惯，健身也没有坚持下来，经常熬夜，作息吃饭不规律，终于在10月份病倒一次。之后每晚早睡，每晚喝牛奶，才算慢慢好好过来。</p>
<p>年初打算学的吉他，学会了两三首，现在也没时间弹了，不过等宿舍里没人的时候，弹一曲还是挺爽的。</p>
<p>为什么现在的人都不知道身体的重要性，没有定期去医院检查的习惯，一是对这笔价格不菲的支出觉得不值得，二是对自己身体的不重视。等到有一天明显感觉身体不舒服的时候，再去医院，基本上就已经病入骨髓了。如扁鹊见蔡桓公中所述。</p>
<p>然后就是运动，天气好的时候，约上好友，乒乓球羽毛球随便什么的，去操场上跑动一下，也是极好的，只是这一年好像什么都没做。</p>
<p>做事情要有计划，把心里想的一条一条写下来。心里会踏实很多。</p>
<p>一直在玩部落冲突这个游戏，部落里的成员也都很有爱，有时候心情不好在群里聊聊也会开心很多。</p>
<h2 id="爱情">爱情</h2><p>遇到时对彼此的感觉都还不错，就在一起了。正是因为在一起的这么草率，也导致后面的痛苦多于快乐。于是在今天正式分手，反而如释重负。</p>
<ol>
<li>一定要深入交往至少6个月</li>
<li>一定要成熟懂事</li>
<li>一定要有自己自己喜欢的工作</li>
</ol>
<p>暂时只有这么多要求吧，感觉要多交往多谈恋爱才能总结经验最后遇到合适的。</p>
<h1 id="2016的愿望">2016的愿望</h1><p>2015年几经波折算是走上了正轨，之后打算专心做iOS，不再胡思乱想。人的精力是有限的，所以要合理运用，把一件事情做到极致也是一件很了不起的事情</p>
<ol>
<li>把剩下的两本书看完，提高iOS开发必备</li>
<li>认真阅读优秀源码</li>
<li>做项目，自己想做的或是外包</li>
<li>坚持写博客做笔记</li>
<li>多看找工作面试的问题</li>
<li>加入社区</li>
<li>贡献自己的代码</li>
<li>找到一份自己喜欢的实习工作</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="逝去的2015">逝去的2015</h1><h2 id="学习">学习</h2><p>记得2015年刚开始的时候，面对的眼花缭乱的技术，心中特别激动。想要全部学会，做一个全栈的程序员。现在回想自己的年少无知还是会觉得幼稚可笑。殊不知这么多的编程语言，每个编程语言有]]>
    </summary>
    
      <category term="总结" scheme="http://pascocoder.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="随想" scheme="http://pascocoder.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="个人随想" scheme="http://pascocoder.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS视频模块的库---VLCMobileKit ]]></title>
    <link href="http://pascocoder.github.io/2015/12/18/ios-video-player-library-VLCMobileKit/"/>
    <id>http://pascocoder.github.io/2015/12/18/ios-video-player-library-VLCMobileKit/</id>
    <published>2015-12-18T05:58:18.000Z</published>
    <updated>2015-12-18T07:03:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="视频播放">视频播放</h3><p>之前做项目，刚好需要一个做视频的项目，网上寻了好久也没有找到合适的。要么是支持的格式不对，要么是太过于复杂，好奇为什么不能有一个封装好的视频模块，遂到v2ex上问，经过大神提示VLC，然后发现可以通过pod安装，所以决定试试。</p>
<h3 id="安装">安装</h3><p>可以通过编译或pod安装，做工程为了省事，pod install 一下解决，过程比较久，因为实在太大了，后来一看600多兆，耐心等待。。。</p>
<p>Xcode打开工程，七十多个error，莫慌，VLCMobileKit需要C++的库支持，所以在framework中加入libstdc++的库，一个不行就ok啦！</p>
<h3 id="文档">文档</h3><p><a href="http://cocoadocs.org/docsets/MobileVLCKit/2.2.1/" target="_blank" rel="external">cocoapod文档地址</a></p>
<h3 id="简单的使用方法">简单的使用方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;MobileVLCKit/MobileVLCKit.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">sample</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) VLCMediaPlayer *player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSArray</span> *options = @[<span class="string">@"--extraintf="</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.player</span> = [[VLCMediaPlayer alloc] initWithOptions:options];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.player</span><span class="variable">.drawable</span> = <span class="keyword">self</span><span class="variable">.videoView</span>;  <span class="comment">// 设置播放器的播放页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后续">后续</h3><p>VLCMobileKit虽然比我之前试的视频播放要优秀，但无奈网上文档太少，需要读点源程序，后面遇到点坑，大补小补总算能用了，之后我会放到我的github上</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="视频播放">视频播放</h3><p>之前做项目，刚好需要一个做视频的项目，网上寻了好久也没有找到合适的。要么是支持的格式不对，要么是太过于复杂，好奇为什么不能有一个封装好的视频模块，遂到v2ex上问，经过大神提示VLC，然后发现可以通过pod安装，所以决定试试。<]]>
    </summary>
    
      <category term="VLC" scheme="http://pascocoder.github.io/tags/VLC/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="media" scheme="http://pascocoder.github.io/tags/media/"/>
    
      <category term="player" scheme="http://pascocoder.github.io/tags/player/"/>
    
      <category term="video" scheme="http://pascocoder.github.io/tags/video/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableViewStyleGrouped隐藏footerView]]></title>
    <link href="http://pascocoder.github.io/2015/11/18/hide-footerview-in-uitableview-style-grouped/"/>
    <id>http://pascocoder.github.io/2015/11/18/hide-footerview-in-uitableview-style-grouped/</id>
    <published>2015-11-18T03:23:48.000Z</published>
    <updated>2015-11-18T03:27:05.000Z</updated>
    <content type="html"><![CDATA[<p>UITableViewStyleGrouped居然自带footerView，效果如下<br><img src="" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UITableViewStyleGrouped居然自带footerView，效果如下<br><img src="" alt=""></p>
]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UINavigationController使用pushviewcontroller时卡顿]]></title>
    <link href="http://pascocoder.github.io/2015/11/16/navigationController-pushviewcontroller-animation-is-slow-choppy/"/>
    <id>http://pascocoder.github.io/2015/11/16/navigationController-pushviewcontroller-animation-is-slow-choppy/</id>
    <published>2015-11-16T09:05:50.000Z</published>
    <updated>2015-11-16T09:10:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="issue">issue</h3><p>往UInavigationController里面压入新视图时，出现卡顿。新视图是新建的UIViewController，没有添加任何代码，居然这他么都能卡顿</p>
<h3 id="solution">solution</h3><p><a href="http://stackoverflow.com/questions/8833631/pushviewcontroller-animation-is-slow-choppy" target="_blank" rel="external">stackoverflow</a></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CASE 1: The root view for a UIViewController subclass that had a halting animation</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame])) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Do some initialization ...</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// self.backgroundColor was NOT being set</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// and animation in pushViewController was slow and stopped at 25% and paused</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CASE 2: HERE IS THE FIX</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame])) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Do some initialization ...</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Set self.backgroundColor for the fix!</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// and animation in pushViewController is no longer slow and and no longer stopped at 25% and paused</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">self</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor]; <span class="comment">// or some other non-clear color</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="issue">issue</h3><p>往UInavigationController里面压入新视图时，出现卡顿。新视图是新建的UIViewController，没有添加任何代码，居然这他么都能卡顿</p>
<h3 id="solution">solution</]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[滑动tableview时显示不正常]]></title>
    <link href="http://pascocoder.github.io/2015/11/12/value-change-when-scroll-my-tableview/"/>
    <id>http://pascocoder.github.io/2015/11/12/value-change-when-scroll-my-tableview/</id>
    <published>2015-11-12T04:22:14.000Z</published>
    <updated>2015-11-12T04:34:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="tableView_cell的重用">tableView cell的重用</h3><p>设置cell内的细节时，如果设置某个子控件时，用了if语句而没有else语句，就会在重用的时候，这个控件显示的不正常。<br>比如我是这样写的：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.message</span><span class="variable">.unreadGraphicCount</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadGraphicLabel</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.message</span><span class="variable">.unreadCallCount</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadCallLabel</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>于是出现了在滚动tableView时，unreadGraphicLabel和unreadCallLabel显示的不正确，一会儿hidden，一会儿不hidden。。。</p>
<p>改正后就正常了</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.message</span><span class="variable">.unreadGraphicCount</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadGraphicLabel</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadGraphicLabel</span><span class="variable">.hidden</span> = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.message</span><span class="variable">.unreadCallCount</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadCallLabel</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.unreadCallLabel</span><span class="variable">.hidden</span> = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="tableView_cell的重用">tableView cell的重用</h3><p>设置cell内的细节时，如果设置某个子控件时，用了if语句而没有else语句，就会在重用的时候，这个控件显示的不正常。<br>比如我是这样写的：<br><figure clas]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="objectivec" scheme="http://pascocoder.github.io/tags/objectivec/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pip install MySQL-python]]></title>
    <link href="http://pascocoder.github.io/2015/10/09/pip-install-MySQL-python/"/>
    <id>http://pascocoder.github.io/2015/10/09/pip-install-MySQL-python/</id>
    <published>2015-10-09T05:57:44.000Z</published>
    <updated>2015-10-09T06:53:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="issue">issue</h1><p>使用 pip install MySQL-python 安装python的mysql模块失败，感觉是缺少系统相关的依赖包<br>然后使用 yum install MySQL-python 就OK了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="issue">issue</h1><p>使用 pip install MySQL-python 安装python的mysql模块失败，感觉是缺少系统相关的依赖包<br>然后使用 yum install MySQL-python 就OK了</p>
]]>
    </summary>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="pip" scheme="http://pascocoder.github.io/tags/pip/"/>
    
      <category term="python" scheme="http://pascocoder.github.io/tags/python/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[digitalOcean referral credit]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/digitalOcean-referral-credit/"/>
    <id>http://pascocoder.github.io/2015/10/07/digitalOcean-referral-credit/</id>
    <published>2015-10-07T04:06:23.000Z</published>
    <updated>2015-10-07T04:06:23.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim常用命令]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/vim-commands/"/>
    <id>http://pascocoder.github.io/2015/10/07/vim-commands/</id>
    <published>2015-10-07T04:04:54.000Z</published>
    <updated>2015-10-08T10:04:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Basics">Basics</h1><table>
<thead>
<tr>
<th>command</th>
<th>operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>:e filename</td>
<td>open filename for edition</td>
</tr>
<tr>
<td>:w</td>
<td>save file</td>
</tr>
<tr>
<td>:q</td>
<td>exit vim</td>
</tr>
<tr>
<td>:q!</td>
<td>quit without saving</td>
</tr>
<tr>
<td>:x</td>
<td>write file (if changes has been made) and exit</td>
</tr>
<tr>
<td>:sav filename</td>
<td>saves file as filename</td>
</tr>
<tr>
<td>.</td>
<td>repeats the last change made in normal mode</td>
</tr>
<tr>
<td>5.</td>
<td>repeats 5 times the last change made in normal mode</td>
</tr>
</tbody>
</table>
<h1 id="Moving_in_the_file">Moving in the file</h1><table>
<thead>
<tr>
<th>command</th>
<th>operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>k or Up Arrow</td>
<td>move the cursor up one line</td>
</tr>
<tr>
<td>j or Down Arrow</td>
<td>move the cursor down one line</td>
</tr>
<tr>
<td>e</td>
<td>move the cursor to the end of the word</td>
</tr>
<tr>
<td>b</td>
<td>move the cursor to the beginning of the word</td>
</tr>
<tr>
<td>0</td>
<td>move the cursor to the beginning of the line</td>
</tr>
<tr>
<td>G</td>
<td>move the cursor to the end of the file</td>
</tr>
<tr>
<td>gg</td>
<td>move the cursor to the beginning of the file</td>
</tr>
<tr>
<td>L</td>
<td>move the cursor to the bottom of the screen</td>
</tr>
<tr>
<td>:59</td>
<td>move the cursor to 59. replace 59 by the desired line number</td>
</tr>
<tr>
<td>20竖杠 (请原谅我这样写。。。)</td>
<td>move the cursor to colume 20</td>
</tr>
<tr>
<td>%</td>
<td>move the cursor to matching parenthesis</td>
</tr>
<tr>
<td>[[</td>
<td>jump to function start</td>
</tr>
<tr>
<td>[{</td>
<td>jump to block start</td>
</tr>
</tbody>
</table>
<h1 id="Cut,copy&amp;paste">Cut,copy&amp;paste</h1><table>
<thead>
<tr>
<th>command</th>
<th>operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>y</td>
<td>copy the selected text to clipboard</td>
</tr>
<tr>
<td>p</td>
<td>paste clipboard contents</td>
</tr>
<tr>
<td>dd</td>
<td>cut current line</td>
</tr>
<tr>
<td>yy</td>
<td>copy current line</td>
</tr>
<tr>
<td>y$</td>
<td>copy to end of line</td>
</tr>
<tr>
<td>D</td>
<td>cut to end of line</td>
</tr>
</tbody>
</table>
<h1 id="未完待续">未完待续</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Basics">Basics</h1><table>
<thead>
<tr>
<th>command</th>
<th>operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>:e filename</td>
<td>ope]]>
    </summary>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="vim" scheme="http://pascocoder.github.io/tags/vim/"/>
    
      <category term="vim" scheme="http://pascocoder.github.io/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[about docker]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/about-docker/"/>
    <id>http://pascocoder.github.io/2015/10/07/about-docker/</id>
    <published>2015-10-07T04:04:05.000Z</published>
    <updated>2015-10-07T04:04:05.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用thinkphp搭建网站nginx的配置]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/thinkphp-nginx-configure/"/>
    <id>http://pascocoder.github.io/2015/10/07/thinkphp-nginx-configure/</id>
    <published>2015-10-07T04:03:28.000Z</published>
    <updated>2015-10-08T08:18:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="URL重写">URL重写</h2><p>thinkphp通过URL重写隐藏入口文件index.php ，所以需要配置nginx的配置文件来配置转发规则。</p>
<h2 id="nginx配置文件">nginx配置文件</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">        #try_files   <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query</span>_string;</span><br><span class="line">        if (!-e <span class="variable">$request</span>_filename) &#123;</span><br><span class="line">                rewrite ^/(.*)$ /index.php/<span class="variable">$1</span>   last;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>详细请参见官方文档<a href="http://document.thinkphp.cn/manual_3_2.html#url_rewrite" target="_blank" rel="external">nginx thinkphp URL重写</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="URL重写">URL重写</h2><p>thinkphp通过URL重写隐藏入口文件index.php ，所以需要配置nginx的配置文件来配置转发规则。</p>
<h2 id="nginx配置文件">nginx配置文件</h2><figure class="hig]]>
    </summary>
    
      <category term="configure" scheme="http://pascocoder.github.io/tags/configure/"/>
    
      <category term="nginx" scheme="http://pascocoder.github.io/tags/nginx/"/>
    
      <category term="thinkphp" scheme="http://pascocoder.github.io/tags/thinkphp/"/>
    
      <category term="thinkphp" scheme="http://pascocoder.github.io/categories/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql export and import]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/mysql-export-and-import/"/>
    <id>http://pascocoder.github.io/2015/10/07/mysql-export-and-import/</id>
    <published>2015-10-07T04:03:05.000Z</published>
    <updated>2015-10-07T04:03:05.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux中PHP的session无法保存]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/linux-php-session/"/>
    <id>http://pascocoder.github.io/2015/10/07/linux-php-session/</id>
    <published>2015-10-07T03:52:22.000Z</published>
    <updated>2015-10-08T09:09:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="issue">issue</h2><p>今天在阿里云配置网站时，惊奇的发现原来运行好好的代码出了问题。网站登录成功后，显示非法请求，即登录成功后的页面在判断session时出了问题，于是我就在该页面打印了session，发现是空，说明session没有保存下来。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserModel.class.php</span></span><br><span class="line"></span><br><span class="line">session(<span class="string">'id'</span>,<span class="variable">$id</span>);</span><br><span class="line">session(<span class="string">'name'</span>,<span class="variable">$username</span>);</span><br><span class="line">session(<span class="string">'is_root'</span>,<span class="number">1</span>);</span><br><span class="line">session(<span class="string">'expire'</span>,<span class="number">3600</span>);</span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">     <span class="string">'status'</span> =&gt;<span class="number">2</span>,</span><br><span class="line">     <span class="string">'info'</span> =&gt;session(<span class="string">'name'</span>),</span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$info</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里传递的info内容是正确的<br>但是！！！</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AdminController.class.php</span></span><br><span class="line"></span><br><span class="line">dump(<span class="variable">$_SESSION</span>);</span><br></pre></td></tr></table></figure>
<p>输出为空！！！！</p>
<h2 id="solution">solution</h2><p>于是找到/etc/php.ini，查看配置:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session<span class="class">.save_path</span> = <span class="string">"/var/lib/php/session"</span></span><br></pre></td></tr></table></figure>
<p>再查看linux系统并没有这个目录，于是，你懂得</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/var/</span>lib<span class="regexp">/php/</span>session</span><br><span class="line">chmod -R <span class="number">777</span> <span class="regexp">/var/</span>lib<span class="regexp">/php/</span>session</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="issue">issue</h2><p>今天在阿里云配置网站时，惊奇的发现原来运行好好的代码出了问题。网站登录成功后，显示非法请求，即登录成功后的页面在判断session时出了问题，于是我就在该页面打印了session，发现是空，说明session没有保存下来。<]]>
    </summary>
    
      <category term="PHP" scheme="http://pascocoder.github.io/tags/PHP/"/>
    
      <category term="Web" scheme="http://pascocoder.github.io/tags/Web/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="PHP" scheme="http://pascocoder.github.io/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[encrypt a message with RSA in python]]></title>
    <link href="http://pascocoder.github.io/2015/09/29/encrypt-a-message-with-RSA-in-python/"/>
    <id>http://pascocoder.github.io/2015/09/29/encrypt-a-message-with-RSA-in-python/</id>
    <published>2015-09-29T07:57:57.000Z</published>
    <updated>2015-09-29T07:57:57.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux中常用命令]]></title>
    <link href="http://pascocoder.github.io/2015/09/26/linux-commands/"/>
    <id>http://pascocoder.github.io/2015/09/26/linux-commands/</id>
    <published>2015-09-26T14:29:08.000Z</published>
    <updated>2015-09-27T09:22:21.000Z</updated>
    <content type="html"><![CDATA[<p>好记性不如烂笔头，linux常用命令很多，虽然可以 man ，但还是写篇文章记录一下，这篇文章就记下我常忘记的命令吧。便于我查阅。</p>
<ol>
<li>远程拷贝 scp</li>
<li>压缩解压 tar</li>
<li>sed &amp; awk</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>好记性不如烂笔头，linux常用命令很多，虽然可以 man ，但还是写篇文章记录一下，这篇文章就记下我常忘记的命令吧。便于我查阅。</p>
<ol>
<li>远程拷贝 scp</li>
<li>压缩解压 tar</li>
<li>sed &amp; awk</li>
</o]]>
    </summary>
    
      <category term="command line" scheme="http://pascocoder.github.io/tags/command-line/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/categories/linux/"/>
    
  </entry>
  
</feed>
