<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pasco's blog]]></title>
  <subtitle><![CDATA[subtitle]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pascocoder.github.io/"/>
  <updated>2015-10-07T04:06:23.000Z</updated>
  <id>http://pascocoder.github.io/</id>
  
  <author>
    <name><![CDATA[Pasco]]></name>
    <email><![CDATA[pascocoder@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[digitalOcean referral credit]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/digitalOcean-referral-credit/"/>
    <id>http://pascocoder.github.io/2015/10/07/digitalOcean-referral-credit/</id>
    <published>2015-10-07T04:06:23.000Z</published>
    <updated>2015-10-07T04:06:23.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim commands]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/vim-commands/"/>
    <id>http://pascocoder.github.io/2015/10/07/vim-commands/</id>
    <published>2015-10-07T04:04:54.000Z</published>
    <updated>2015-10-07T04:04:54.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[about docker]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/about-docker/"/>
    <id>http://pascocoder.github.io/2015/10/07/about-docker/</id>
    <published>2015-10-07T04:04:05.000Z</published>
    <updated>2015-10-07T04:04:05.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[thinkphp nginx configure]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/thinkphp-nginx-configure/"/>
    <id>http://pascocoder.github.io/2015/10/07/thinkphp-nginx-configure/</id>
    <published>2015-10-07T04:03:28.000Z</published>
    <updated>2015-10-07T04:03:28.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql export and import]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/mysql-export-and-import/"/>
    <id>http://pascocoder.github.io/2015/10/07/mysql-export-and-import/</id>
    <published>2015-10-07T04:03:05.000Z</published>
    <updated>2015-10-07T04:03:05.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux php session]]></title>
    <link href="http://pascocoder.github.io/2015/10/07/linux-php-session/"/>
    <id>http://pascocoder.github.io/2015/10/07/linux-php-session/</id>
    <published>2015-10-07T03:52:22.000Z</published>
    <updated>2015-10-07T03:52:22.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[encrypt a message with RSA in python]]></title>
    <link href="http://pascocoder.github.io/2015/09/29/encrypt-a-message-with-RSA-in-python/"/>
    <id>http://pascocoder.github.io/2015/09/29/encrypt-a-message-with-RSA-in-python/</id>
    <published>2015-09-29T07:57:57.000Z</published>
    <updated>2015-09-29T07:57:57.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[python scrapy]]></title>
    <link href="http://pascocoder.github.io/2015/09/29/python-scrapy/"/>
    <id>http://pascocoder.github.io/2015/09/29/python-scrapy/</id>
    <published>2015-09-29T07:03:29.000Z</published>
    <updated>2015-09-29T07:03:29.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux中常用命令]]></title>
    <link href="http://pascocoder.github.io/2015/09/26/linux-commands/"/>
    <id>http://pascocoder.github.io/2015/09/26/linux-commands/</id>
    <published>2015-09-26T14:29:08.000Z</published>
    <updated>2015-09-27T09:22:21.000Z</updated>
    <content type="html"><![CDATA[<p>好记性不如烂笔头，linux常用命令很多，虽然可以 man ，但还是写篇文章记录一下，这篇文章就记下我常忘记的命令吧。便于我查阅。</p>
<ol>
<li>远程拷贝 scp</li>
<li>压缩解压 tar</li>
<li>sed &amp; awk</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>好记性不如烂笔头，linux常用命令很多，虽然可以 man ，但还是写篇文章记录一下，这篇文章就记下我常忘记的命令吧。便于我查阅。</p>
<ol>
<li>远程拷贝 scp</li>
<li>压缩解压 tar</li>
<li>sed &amp; awk</li>
</o]]>
    </summary>
    
      <category term="command line" scheme="http://pascocoder.github.io/tags/command-line/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS6.5安装配置LNMP(linux + nginx + MySQL + PHP)]]></title>
    <link href="http://pascocoder.github.io/2015/09/26/install-and-configure-LNMP/"/>
    <id>http://pascocoder.github.io/2015/09/26/install-and-configure-LNMP/</id>
    <published>2015-09-26T08:12:36.000Z</published>
    <updated>2015-09-27T06:18:10.000Z</updated>
    <content type="html"><![CDATA[<p>新买的阿里云系统选择了CentOS6.5，需要安装Apache，MySQL，PHP之类的东西，之前虽然配置过好几次，但是每次再配置时具体细节就记不清楚了，还需要去网上查，所以今天闲来无事配置完记录一下，也便于以后查阅。</p>
<p>为了方便，采用 yum 安装</p>
<h2 id="安装epel_repository">安装epel repository</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure>
<h2 id="安装MySQL">安装MySQL</h2><h3 id="卸载以前的MySQL相关的软件">卸载以前的MySQL相关的软件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mysql-server mysql mysql-libs</span><br></pre></td></tr></table></figure>
<h3 id="使用yum安装MySQL">使用yum安装MySQL</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-server</span><br></pre></td></tr></table></figure>
<h3 id="启动MySQL">启动MySQL</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure>
<h3 id="配置MySQL">配置MySQL</h3><p>输入以下指令根据提示设置MySQL<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure></p>
<h3 id="开启远程访问（可选）">开启远程访问（可选）</h3><p>如果想用另一台电脑程序访问MySQL，需要开启。如果只是同一台电脑使用MySQL，无需开启。<br>需要开启的话，打开MySQL对应的端口（默认是3306）<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport <span class="number">3306</span> -m <span class="keyword">state</span> --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">/sbin/service iptables save</span><br><span class="line">iptables -I OUTPUT -p tcp --sport <span class="number">3306</span> -m <span class="keyword">state</span> --state ESTABLISHED -j ACCEPT</span><br><span class="line">/sbin/service iptables save</span><br></pre></td></tr></table></figure></p>
<h2 id="安装nginx">安装nginx</h2><h3 id="yum_安装_nginx">yum 安装 nginx</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="运行nginx">运行nginx</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx start</span><br></pre></td></tr></table></figure>
<h2 id="安装PHP">安装PHP</h2><h3 id="yum_安装PHP">yum 安装PHP</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install php-fpm php-mysql</span><br></pre></td></tr></table></figure>
<h3 id="配置PHP">配置PHP</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>php.ini</span><br></pre></td></tr></table></figure>
<p>把cgi.fix_pathinfo=1 改为 cgi.fix_pathinfo=0</p>
<h2 id="配置nginx">配置nginx</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/nginx/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>修改 work processes数目为4；</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span><span class="keyword">default</span>.conf</span><br></pre></td></tr></table></figure>
<ol>
<li>在index中添加index.php</li>
<li>把server_name改为当前的IP地址</li>
<li>把root改为 /usr/share/nginx/html</li>
<li>去掉 location ~ .php$ 的注释</li>
<li>把root改为真实的目录 /usr/share/nginx/html</li>
<li>把 fastcgi_param 改为 SCRIPT_FILENAME   $document_root$fastcgi_script_name</li>
</ol>
<p>下面给出参考配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="title">index</span> index.php  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">error_page</span>  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">    <span class="title">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">        <span class="title">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="title">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="title">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="title">root</span>           /usr/share/nginx/html;</span><br><span class="line">        <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="title">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="title">fastcgi_param</span>  SCRIPT_FILENAME   <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="title">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="配置php-fpm">配置php-fpm</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php-fpm.<span class="keyword">d</span>/www.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>把user和group改为nginx<br>然后重启服务<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> service php-fpm restart</span><br></pre></td></tr></table></figure></p>
<h2 id="创建_phpinfo页面">创建 phpinfo页面</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html<span class="regexp">/info.php</span></span><br></pre></td></tr></table></figure>
<p>写入如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	phpinfo();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>重启nginx服务器<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> service nginx restart</span><br></pre></td></tr></table></figure></p>
<h2 id="设置开机自启动">设置开机自启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig --<span class="keyword">levels</span> 235 mysqld <span class="keyword">on</span></span><br><span class="line">sudo chkconfig --<span class="keyword">levels</span> 235 nginx <span class="keyword">on</span></span><br><span class="line">sudo chkconfig --<span class="keyword">levels</span> 235 php-fpm <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>新买的阿里云系统选择了CentOS6.5，需要安装Apache，MySQL，PHP之类的东西，之前虽然配置过好几次，但是每次再配置时具体细节就记不清楚了，还需要去网上查，所以今天闲来无事配置完记录一下，也便于以后查阅。</p>
<p>为了方便，采用 yum 安装</p>
<]]>
    </summary>
    
      <category term="linux" scheme="http://pascocoder.github.io/tags/linux/"/>
    
      <category term="mysql" scheme="http://pascocoder.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="http://pascocoder.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[delegate and block]]></title>
    <link href="http://pascocoder.github.io/2015/09/22/delegate-and-block/"/>
    <id>http://pascocoder.github.io/2015/09/22/delegate-and-block/</id>
    <published>2015-09-22T12:35:53.000Z</published>
    <updated>2015-09-22T12:35:53.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS视图层次管理]]></title>
    <link href="http://pascocoder.github.io/2015/09/22/Managing-the-View-Hierarchy/"/>
    <id>http://pascocoder.github.io/2015/09/22/Managing-the-View-Hierarchy/</id>
    <published>2015-09-22T04:36:00.000Z</published>
    <updated>2015-09-22T06:54:55.000Z</updated>
    <content type="html"><![CDATA[<p>为了让某个view放到最上面，或者将某个view放到下层，经常需要使用bringSubviewToFront:和sendSubviewToBack:两个方法。</p>
<h3 id="遇到的问题">遇到的问题</h3><p>设置的rootBackgroundButton用来遮盖self.view区域，但换层的时候，rootBackgroundButton被新的层覆盖，不能显示在最上面了。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.viewControllerContainView</span> addSubview:willShowViewController<span class="variable">.view</span>];</span><br><span class="line">willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">320</span>;</span><br><span class="line">     <span class="keyword">if</span> (animated) &#123;</span><br><span class="line">         [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">              previousViewController<span class="variable">.view</span><span class="variable">.x</span> += <span class="number">20</span>;         </span><br><span class="line">          &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                <span class="comment">//移除上一个ViewController</span></span><br><span class="line">                [previousViewController<span class="variable">.view</span> removeFromSuperview];</span><br><span class="line">          &#125;];</span><br><span class="line">                </span><br><span class="line"><span class="comment">//动画的把新的viewcontroller的origin.x设为0</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.6</span> delay:<span class="number">0</span> usingSpringWithDamping:<span class="number">1</span> initialSpringVelocity:<span class="number">1.2</span> options:<span class="built_in">UIViewAnimationOptionCurveLinear</span> animations:^&#123;</span><br><span class="line">                    willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">                &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">                <span class="comment">//动画的把新的菜单栏缩回</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> delay:<span class="number">0.1</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span> animations:^&#123;</span><br><span class="line">    [<span class="keyword">self</span> setMenuOffset:<span class="number">0.0</span>f];</span><br><span class="line">	&#125; completion:<span class="literal">nil</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [previousViewController<span class="variable">.view</span> removeFromSuperview];</span><br><span class="line">     willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">    [<span class="keyword">self</span> setMenuOffset:<span class="number">0.0</span>f];</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">     <span class="keyword">self</span><span class="variable">.currentSelectedIndex</span> = index;</span><br></pre></td></tr></table></figure>
<p>出现效果如下：<br><img src="/img/managing_the_view_hierarchy/1.png" alt="pic1"></p>
<p>修改代码，添加<br>[self.viewControllerContainView bringSubviewToFront:self.rootBackgroundButton]</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.viewControllerContainView</span> addSubview:willShowViewController<span class="variable">.view</span>];</span><br><span class="line">willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">320</span>;</span><br><span class="line"><span class="comment">//rootBackgroundButton放在最上面</span></span><br><span class="line">[<span class="keyword">self</span><span class="variable">.viewControllerContainView</span> bringSubviewToFront:<span class="keyword">self</span><span class="variable">.rootBackgroundButton</span>];</span><br><span class="line">     <span class="keyword">if</span> (animated) &#123;</span><br><span class="line">         [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">              previousViewController<span class="variable">.view</span><span class="variable">.x</span> += <span class="number">20</span>;         </span><br><span class="line">          &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                <span class="comment">//移除上一个ViewController</span></span><br><span class="line">                [previousViewController<span class="variable">.view</span> removeFromSuperview];</span><br><span class="line">          &#125;];</span><br><span class="line">                </span><br><span class="line"><span class="comment">//动画的把新的viewcontroller的origin.x设为0</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.6</span> delay:<span class="number">0</span> usingSpringWithDamping:<span class="number">1</span> initialSpringVelocity:<span class="number">1.2</span> options:<span class="built_in">UIViewAnimationOptionCurveLinear</span> animations:^&#123;</span><br><span class="line">                    willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">                &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">                <span class="comment">//动画的把新的菜单栏缩回</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> delay:<span class="number">0.1</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span> animations:^&#123;</span><br><span class="line">    [<span class="keyword">self</span> setMenuOffset:<span class="number">0.0</span>f];</span><br><span class="line">	&#125; completion:<span class="literal">nil</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [previousViewController<span class="variable">.view</span> removeFromSuperview];</span><br><span class="line">     willShowViewController<span class="variable">.view</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">    [<span class="keyword">self</span> setMenuOffset:<span class="number">0.0</span>f];</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">     <span class="keyword">self</span><span class="variable">.currentSelectedIndex</span> = index;</span><br></pre></td></tr></table></figure>
<p>正常了！<br><img src="/img/managing_the_view_hierarchy/2.png" alt="pic2"></p>
<h3 id="更多">更多</h3><ul>
<li>superview    (Property)</li>
<li>subviews    (Property)</li>
<li>window    (Property)</li>
<li>addSubview:</li>
<li>bringSubviewToFront:</li>
<li>sendSubviewToBack:</li>
<li>removeFromSuperview</li>
<li>insertSubview:atIndex:</li>
<li>insertSubview:aboveSubview:</li>
<li>insertSubview:belowSubview:</li>
<li>exchangeSubviewAtIndex:withSubviewAtIndex:</li>
<li>isDescendantOfView:</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了让某个view放到最上面，或者将某个view放到下层，经常需要使用bringSubviewToFront:和sendSubviewToBack:两个方法。</p>
<h3 id="遇到的问题">遇到的问题</h3><p>设置的rootBackgroundButton用来]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Weakify and strongify]]></title>
    <link href="http://pascocoder.github.io/2015/09/18/Weakify-and-strongify/"/>
    <id>http://pascocoder.github.io/2015/09/18/Weakify-and-strongify/</id>
    <published>2015-09-18T08:48:37.000Z</published>
    <updated>2015-09-18T09:01:38.000Z</updated>
    <content type="html"><![CDATA[<p>有两篇文章，现在还没时间深究，先附上链接</p>
<p><a href="http://each.dog/blog/2015/05/02/weakify-and-strongify/" target="_blank" rel="external">Weakify和strongify探究</a></p>
<p><a href="http://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">宏定义的黑魔法 - 宏菜鸟起飞手册</a></p>
<p><a href="http://each.dog/blog/2015/04/30/create-your-pod-library/" target="_blank" rel="external">创建你的CocoaPod库简明教程</a></p>
<p><a href="http://www.cnblogs.com/sunnyxx/p/3544703.html" target="_blank" rel="external">Reactive Cocoa Tutorial [1] = “神奇的Macros”;</a></p>
<p><a href="http://onevcat.com/2012/06/arc-hand-by-hand/" target="_blank" rel="external">手把手教你ARC——iOS/Mac开发ARC入门和使用</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有两篇文章，现在还没时间深究，先附上链接</p>
<p><a href="http://each.dog/blog/2015/05/02/weakify-and-strongify/" target="_blank" rel="external">Weakify和stron]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C中的点语法]]></title>
    <link href="http://pascocoder.github.io/2015/09/18/objectivec-dot-grammer/"/>
    <id>http://pascocoder.github.io/2015/09/18/objectivec-dot-grammer/</id>
    <published>2015-09-18T07:51:33.000Z</published>
    <updated>2015-09-18T08:31:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Java中的点语法">Java中的点语法</h2><p>在Java中会使用 对象名.成员变量 用来直接访问对象中的成员变量。</p>
<h2 id="objective-c中的点语法">objective-c中的点语法</h2><p>在 objective-c中 使用 对象名.成员变量 会自动调用该成员变量的set方法，而不是直接访问</p>
<p>objective-c中的点语法的本质是方法调用，不是直接访问成员变量。</p>
<h2 id="自定义set方法内部">自定义set方法内部</h2><p>Java中，如果自定义set方法，要给成员变量赋值会使用 this 关键字。this 代表调用该方法的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperty</span><span class="params">(<span class="keyword">int</span> property)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.property = property;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>objective 中的self关键字类似于this，也是代表调用该方法的对象，</p>
<p>但是如果在类的内部自定义的set方法中使用 self.property 的点语法，如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setProperty:(<span class="keyword">int</span>) property&#123;</span><br><span class="line">	<span class="keyword">self</span><span class="variable">.property</span> = property;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点语法会自动调用property的set方法，从而造成循环调用。</p>
<p>##下划线➕属性<br>为了解决这个问题，在类的内部可以通过 _property来直接访问对象的成员变量。所以方法要写成</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setProperty:(<span class="keyword">int</span>) property&#123;</span><br><span class="line">	_property = property;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="建议">建议</h2><p>类内部使用下划线，类外部使用点语法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Java中的点语法">Java中的点语法</h2><p>在Java中会使用 对象名.成员变量 用来直接访问对象中的成员变量。</p>
<h2 id="objective-c中的点语法">objective-c中的点语法</h2><p>在 objective-c中 ]]>
    </summary>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/categories/objective-c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadView and viewDidLoad]]></title>
    <link href="http://pascocoder.github.io/2015/09/16/loadView-and-viewDidLoad/"/>
    <id>http://pascocoder.github.io/2015/09/16/loadView-and-viewDidLoad/</id>
    <published>2015-09-15T16:41:25.000Z</published>
    <updated>2015-09-18T08:38:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="LoadView">LoadView</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="LoadView">LoadView</h2>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[AirDrop 传输失败]]></title>
    <link href="http://pascocoder.github.io/2015/09/15/AirDrop-transfer-fail/"/>
    <id>http://pascocoder.github.io/2015/09/15/AirDrop-transfer-fail/</id>
    <published>2015-09-15T02:00:19.000Z</published>
    <updated>2015-09-15T02:08:04.000Z</updated>
    <content type="html"><![CDATA[<p>最近使用AirDrop共享传递文件时，总是提示传输失败，上网搜了一下原因。<br>是翻墙使用代理导致的。所以，先暂时关掉Shadowsocks。就OK了。</p>
<p>有时会搜不到对方，可以试试下面的 看不到要找得人？搜索旧款mac。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近使用AirDrop共享传递文件时，总是提示传输失败，上网搜了一下原因。<br>是翻墙使用代理导致的。所以，先暂时关掉Shadowsocks。就OK了。</p>
<p>有时会搜不到对方，可以试试下面的 看不到要找得人？搜索旧款mac。</p>
]]>
    </summary>
    
      <category term="AirDrop" scheme="http://pascocoder.github.io/tags/AirDrop/"/>
    
      <category term="mac" scheme="http://pascocoder.github.io/tags/mac/"/>
    
      <category term="mac" scheme="http://pascocoder.github.io/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[隐藏iOS的状态栏]]></title>
    <link href="http://pascocoder.github.io/2015/09/09/ios-statusBar-hidden/"/>
    <id>http://pascocoder.github.io/2015/09/09/ios-statusBar-hidden/</id>
    <published>2015-09-08T16:32:00.000Z</published>
    <updated>2015-09-08T16:41:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="隐藏iOS的状态栏">隐藏iOS的状态栏</h3><ol>
<li><p>在应用的AppDelegate.m文件中的application:didFinishLaunchingWithOptions:方法中添加以下代码</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">YES</span> withAnimation:<span class="built_in">UIStatusBarAnimationFade</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>在ViewController.m文件中添加prefersStatusBarHidden方法，并返回YES</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="隐藏iOS的状态栏">隐藏iOS的状态栏</h3><ol>
<li><p>在应用的AppDelegate.m文件中的application:didFinishLaunchingWithOptions:方法中添加以下代码</p>
<figure class="hig]]>
    </summary>
    
      <category term="Tips" scheme="http://pascocoder.github.io/tags/Tips/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[effective objective c 2.0 读书笔记]]></title>
    <link href="http://pascocoder.github.io/2015/09/05/effective-objective-c-reading-notes/"/>
    <id>http://pascocoder.github.io/2015/09/05/effective-objective-c-reading-notes/</id>
    <published>2015-09-05T01:32:52.000Z</published>
    <updated>2015-09-28T01:39:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/25829244/" target="_blank" rel="external">effective objective c 2.0 豆瓣地址</a></p>
<h2 id="第1章_熟悉objective-c_1">第1章　熟悉objective-c 1</h2><h3 id="第1条：了解objective-c语言的起源_1">第1条：了解objective-c语言的起源 1</h3><ul>
<li>objective-c使用 消息结构 而非 函数调用 。使用消息结构的语言，其运行时所执行的代码由运行环境来决定，使用函数调用的语言，则有编译器决定。如果范例代码中调用的函数是多态，那么运行时就要按照“虚方法表”（virtual table）来查出到底应该执行哪个函数实现。而采用消息结构的语言，不论是否多态，总是运行时才会去查找所要执行的方法，实际上编译器甚至不关心接受消息的对象时何种类型。接收消息的对象问题也是在运行时出路，其过程叫做“动态绑定”（dynamic binding）。</li>
<li><p>所有objective-c语言的对象都必须这样声明，因为对象所占用内存总分配在“堆空间”（heap space）<br>中，而绝不会分配在“栈”（stack）上，不能在栈中分配objective-c对象。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *someString = <span class="string">@"The string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> stackString;</span><br><span class="line"><span class="comment">//error:interface type cannot be statically allocated</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果再创建一个变量，令其指向同一地址，那么并不拷贝该对象，只是这两个变量会同时指向此对象：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *someString = <span class="string">@"The string"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *antherString = someString;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分配在堆中的内存必须直接管理，而分配在栈中用于保存变量的内存则会在其栈帧弹出时自动清理。</p>
<h3 id="第2条：在类的头文件中尽量少引入其他头文件_4">第2条：在类的头文件中尽量少引入其他头文件 4</h3></li>
<li><p>在编译一个使用了ECOPerson类的文件时，不需要知道EOCEmployer类的全部细节，只需要知道有一个类名叫EOCEmployer就好，向前声明（forward declaring）该类。实现文件中再使用#import “EOCEmployer.h”</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">EOCEmployer</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入头文件的时机尽量延后，只有确有需要时才引入，这样就可以减少类的使用者所需引入头文件的数量</p>
</li>
<li>向前声明也解决了两个类互相引用的问题。否则会产生循环引用，其中一个类无法被正确编译</li>
<li>如果要声明你写的类遵循某个协议（protocol），那么协议必须有完整定义，不能只用向前声明。<br>若因为要实现属性、实例变量或者遵循协议而必须引入头文件，则应尽量将其移至“class-continuation分类”中<h3 id="第3条：多用字面量语法，少用与之等价的方法_7">第3条：多用字面量语法，少用与之等价的方法 7</h3></li>
<li><p>字面量语法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *intNumber = @<span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSNuber</span> *floatNumber = @<span class="number">2.5</span>f;</span><br><span class="line"><span class="built_in">NSArray</span> *animals = @[<span class="string">@"cat"</span>,<span class="string">@"dag"</span>,<span class="string">@"mouse"</span>,<span class="string">@"badger"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *personData = @[<span class="string">@"firstname"</span>:<span class="string">@"Matt"</span>,<span class="string">@"lastname"</span>:<span class="string">@"Galloway"</span>,<span class="string">@"age"</span>:@<span class="number">28</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>字面量语法更简洁易读，当数组中有nil会抛出异常，有助于查错。</p>
</li>
<li>字面量语法有一个限制，除了字符串以外，所创建出来的对象必须属于Foundation框架才行。如果自定义了这些类得子类，无法用字面量语法创建其对象。</li>
<li>使用字面量语法创建出来的字符串、数组、字典对象都是不可变的（immutable）。若想要可变版本的对象，则需要复制一份。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *<span class="keyword">mutable</span> = [@[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>] mutableCopy];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第4条：多用类型常量，少用#define预处理指令_11">第4条：多用类型常量，少用#define预处理指令 11</h3><ul>
<li>若常量局限于实现文件之内，则在前面加字母k；若再类之外可见，则通常以类名为前缀<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> kAnimationDuration = <span class="number">0.3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这种方式创建的常量带有类型信息。</p>
<ul>
<li>为外界可见的常值变量，需房子啊全局符号表中，以便外界使用<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in the header file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSSting</span> *<span class="keyword">const</span> EOCStringConstant;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in the implementation file</span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@"VALUE"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第5条：用枚举表示状态、选项、状态码_14">第5条：用枚举表示状态、选项、状态码 14</h3><ul>
<li><p>枚举适合表示状态码或可组合的选项</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</span><br><span class="line">	EOCConnectionStateDisconnected,</span><br><span class="line">	EOCConnectionStateConnecting,</span><br><span class="line">	EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">emun EOCConnectionState state = EOCConnectionStateDisconnected;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState EOCConnectionState;</span><br><span class="line">EOCConnectionState state = EOCConnectionStateDisconnected;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以指明用何种底层数据来保存枚举类型的变量，这样的话就可以向前声明枚举变量了，若不指定底层数据类型，就不能，因为编译器不知道底层数据类型的大小就不知道该分配多少内存空间</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionStatus : <span class="built_in">NSInteger</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项彼此组合</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="built_in">UIViewAutoresizing</span> &#123;</span><br><span class="line">    <span class="built_in">UIViewAutoresizingNone</span>                 = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span>   = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleWidth</span>        = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleRightMargin</span>  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleTopMargin</span>    = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleHeight</span>       = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleBottomMargin</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//It’s then possible to determine whether one of the options is set by using the bitwise AND operator:</span></span><br><span class="line"><span class="keyword">enum</span> <span class="built_in">UIVewAutoresizing</span> resizing =</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleWidth</span> |</span><br><span class="line">    <span class="built_in">UIViewAutoresizingFlexibleHeight</span>;</span><br><span class="line"><span class="keyword">if</span> (resizing &amp; <span class="built_in">UIViewAutoresizingFlexibleWidth</span>) &#123;</span><br><span class="line">    <span class="comment">// UIViewAutoresizingFlexibleWidth is set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结合switch 语句</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EOCConnectionState) &#123;</span><br><span class="line">    EOCConnectionStateDisconnected,</span><br><span class="line">    EOCConnectionStateConnecting,</span><br><span class="line">    EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (_currentState) &#123;</span><br><span class="line">    EOCConnectionStateDisconnected:</span><br><span class="line">        <span class="comment">// Handle disconnected state</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    EOCConnectionStateConnecting:</span><br><span class="line">        <span class="comment">// Handle connecting state</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    EOCConnectionStateConnected:</span><br><span class="line">        <span class="comment">// Handle connected state</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第2章_对象、消息、运行期_21">第2章　对象、消息、运行期 21</h2><h3 id="第6条：理解“属性”这一概念_21">第6条：理解“属性”这一概念 21</h3><ul>
<li>@dynamic关键字会告诉编译器不自动创建实现属性所用的实例变量，也不要为其创建存取方法。在编译器访问属性的代码时，即使编译器发现没有定义存取方法，也不会报错，它相信这些方法能在运行期找到。</li>
<li><h3 id="第7条：在对象内部尽量直接访问实例变量_28">第7条：在对象内部尽量直接访问实例变量 28</h3><h3 id="第8条：理解“对象等同性”这一概念_30">第8条：理解“对象等同性”这一概念 30</h3><h3 id="第9条：以“类族模式”隐藏实现细节_35">第9条：以“类族模式”隐藏实现细节 35</h3><h3 id="第10条：在既有类中使用关联对象存放自定义数据_39">第10条：在既有类中使用关联对象存放自定义数据 39</h3><h3 id="第11条：理解objc_msgsend的作用_42">第11条：理解objc_msgsend的作用 42</h3><h3 id="第12条：理解消息转发机制_46">第12条：理解消息转发机制 46</h3><h3 id="第13条：用“方法调配技术”调试“黑盒方法”_52">第13条：用“方法调配技术”调试“黑盒方法” 52</h3><h3 id="第14条：理解“类对象”的用意_56">第14条：理解“类对象”的用意 56</h3><h2 id="第3章_接口与api设计_60">第3章　接口与api设计 60</h2><h3 id="第15条：用前缀避免命名空间冲突_60">第15条：用前缀避免命名空间冲突 60</h3><h3 id="第16条：提供“全能初始化方法”_64">第16条：提供“全能初始化方法” 64</h3><h3 id="第17条：实现description方法_69">第17条：实现description方法 69</h3><h3 id="第18条：尽量使用不可变对象_73">第18条：尽量使用不可变对象 73</h3><h3 id="第19条：使用清晰而协调的命名方式_78">第19条：使用清晰而协调的命名方式 78</h3><h3 id="第20条：为私有方法名加前缀_83">第20条：为私有方法名加前缀 83</h3><h3 id="第21条：理解objective-c错误模型_85">第21条：理解objective-c错误模型 85</h3><h3 id="第22条：理解nscopying协议_89">第22条：理解nscopying协议 89</h3><h2 id="第4章_协议与分类_94">第4章　协议与分类 94</h2><h3 id="第23条：通过委托与数据源协议进行对象间通信_94">第23条：通过委托与数据源协议进行对象间通信 94</h3><h3 id="第24条：将类的实现代码分散到便于管理的数个分类之中_101">第24条：将类的实现代码分散到便于管理的数个分类之中 101</h3><h3 id="第25条：总是为第三方类的分类名称加前缀_104">第25条：总是为第三方类的分类名称加前缀 104</h3><h3 id="第26条：勿在分类中声明属性_106">第26条：勿在分类中声明属性 106</h3><h3 id="第27条：使用“class-continuation分类”隐藏实现细节_108">第27条：使用“class-continuation分类”隐藏实现细节 108</h3><h3 id="第28条：通过协议提供匿名对象_114">第28条：通过协议提供匿名对象 114</h3><h2 id="第5章_内存管理_117">第5章　内存管理 117</h2><h3 id="第29条：理解引用计数_117">第29条：理解引用计数 117</h3><h3 id="第30条：以arc简化引用计数_122">第30条：以arc简化引用计数 122</h3><h3 id="第31条：在dealloc方法中只释放引用并解除监听_130">第31条：在dealloc方法中只释放引用并解除监听 130</h3><h3 id="第32条：编写“异常安全代码”时留意内存管理问题_132">第32条：编写“异常安全代码”时留意内存管理问题 132</h3><h3 id="第33条：以弱引用避免保留环_134">第33条：以弱引用避免保留环 134</h3><h3 id="第34条：以“自动释放池块”降低内存峰值_137">第34条：以“自动释放池块”降低内存峰值 137</h3><h3 id="第35条：用“僵尸对象”调试内存管理问题_141">第35条：用“僵尸对象”调试内存管理问题 141</h3><h3 id="第36条：不要使用retaincount_146">第36条：不要使用retaincount 146</h3><h2 id="第6章_块与大中枢派发_149">第6章　块与大中枢派发 149</h2><h3 id="第37条：理解“块”这一概念_149">第37条：理解“块”这一概念 149</h3><h3 id="第38条：为常用的块类型创建typedef_154">第38条：为常用的块类型创建typedef 154</h3><h3 id="第39条：用handler块降低代码分散程度_156">第39条：用handler块降低代码分散程度 156</h3><h3 id="第40条：用块引用其所属对象时不要出现保留环_162">第40条：用块引用其所属对象时不要出现保留环 162</h3><h3 id="第41条：多用派发队列，少用同步锁_165">第41条：多用派发队列，少用同步锁 165</h3><h3 id="第42条：多用gcd，少用performselector系列方法_169">第42条：多用gcd，少用performselector系列方法 169</h3><h3 id="第43条：掌握gcd及操作队列的使用时机_173">第43条：掌握gcd及操作队列的使用时机 173</h3><h3 id="第44条：通过dispatch_group机制，根据系统资源状况来执行任务_175">第44条：通过dispatch group机制，根据系统资源状况来执行任务 175</h3><h3 id="第45条：使用dispatch_once来执行只需运行一次的线程安全代码_179">第45条：使用dispatch_once来执行只需运行一次的线程安全代码 179</h3><h3 id="第46条：不要使用dispatch_get_current_queue_180">第46条：不要使用dispatch_get_current_queue 180</h3><h2 id="第7章_系统框架_185">第7章　系统框架 185</h2><h3 id="第47条：熟悉系统框架_185">第47条：熟悉系统框架 185</h3><h3 id="第48条：多用块枚举，少用for循环_187">第48条：多用块枚举，少用for循环 187</h3><h3 id="第49条：对自定义其内存管理语义的collection使用无缝桥接_193">第49条：对自定义其内存管理语义的collection使用无缝桥接 193</h3><h3 id="第50条：构建缓存时选用nscache而非nsdictionary_197">第50条：构建缓存时选用nscache而非nsdictionary 197</h3><h3 id="第51条：精简initialize与load的实现代码_200">第51条：精简initialize与load的实现代码 200</h3><h3 id="第52条：别忘了nstimer会保留其目标对象_205">第52条：别忘了nstimer会保留其目标对象 205</h3></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://book.douban.com/subject/25829244/" target="_blank" rel="external">effective objective c 2.0 豆瓣地址</a></p>
<h2 id="第1章_熟悉ob]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/tags/objective-c/"/>
    
      <category term="读书笔记" scheme="http://pascocoder.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="objective-c" scheme="http://pascocoder.github.io/categories/objective-c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS中常见的对象]]></title>
    <link href="http://pascocoder.github.io/2015/09/04/key-objects-in-iOS/"/>
    <id>http://pascocoder.github.io/2015/09/04/key-objects-in-iOS/</id>
    <published>2015-09-03T18:48:56.000Z</published>
    <updated>2015-09-03T19:01:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UIApplication对象">UIApplication对象</h2><p>用户与iOS设备交互时产生的事件(Multitouch Events，Motion Event，Remote Control Event)交由UIApplication对象来分发给control objects(UIControl)对应的target objects来处理并且管理整个事件循环，而一些关于app运行时重要事件委托给app delegate来处理。</p>
<h2 id="App_delegate对象">App delegate对象</h2><p>App delegate对象遵循UIApplicationDelegate协议，响应app运行时重要事件(app启动、app内存不足、app终止、切换到另一个app、切回app)，主要用于app在启动时初始化一些重要数据结构；例如，初始化UIWindow，设置一些属性，为window添加rootViewController。</p>
<h2 id="View_controller对象">View controller对象</h2><p>View Controller有一个view属性是view层次结构中的根view，你可以添加子view来构建复杂的view；controller有一些viewDidLoad、viewWillAppear等方法来管理view的生命周期；由于它继承UIResponder，所有还会响应和处理用户事件。</p>
<h2 id="Documents和data_model对象">Documents和data model对象</h2><p>data model对象主要用来存储数据。例如，饿了么app在搜索切换地址后，有历史记录搜索地址历史，当app下次启动时，读取和显示搜索地址历史。<br>document对象(继承UIDocument)用来管理一些或所有的data model对象。document对象并不是必须的，但提供一种方便的方式来分组属于单个文件或多个文件的数据。</p>
<h2 id="UIWindow对象">UIWindow对象</h2><p>UIWindow对象位于view层次结构中的最顶层，它充当一个基本容器而不显示内容，如果想显示内容，添加一个content view到window。<br>它也是继承UIResponder，所以它也是会响应和处理用户事件。</p>
<h2 id="View、control、layer对象">View、control、layer对象</h2><p>View对象可以通过addSubview和removeFromSuperview 等方法管理view的层次结构，使用layoutIfNeeded和setNeedsLayout等方法布局view的层次结构，当你发现系统提供view已经满足不了你想要的外观需求时，可以重写drawRect方法或通过layer属性来构造复杂的图形外观和动画。还有一点，UIView也是继承UIResponder，所以也能够处理用户事件。<br>Control对象通常就是处理特定类型用户交互的View，常用的有button、switch、text field等。<br>除了使用View和Control来构建view层次结构来影响app外观之外，还可以使用Core Animation框架的Layer对象来渲染view外观和构建复杂的动画。</p>
<p><img src="/img/key-objects-in-iOS/structure.png" alt="pic1"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UIApplication对象">UIApplication对象</h2><p>用户与iOS设备交互时产生的事件(Multitouch Events，Motion Event，Remote Control Event)交由UIApplication对象来分发给co]]>
    </summary>
    
      <category term="UIKit" scheme="http://pascocoder.github.io/tags/UIKit/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发中View Controllers 的生命周期]]></title>
    <link href="http://pascocoder.github.io/2015/09/03/lifecycle-of-viewController/"/>
    <id>http://pascocoder.github.io/2015/09/03/lifecycle-of-viewController/</id>
    <published>2015-09-03T14:07:54.000Z</published>
    <updated>2015-09-03T18:40:35.000Z</updated>
    <content type="html"><![CDATA[<p>译自苹果开发文档，<a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ViewLoadingandUnloading/ViewLoadingandUnloading.html" target="_blank" rel="external">原文地址</a></p>
<p>View controllers 是管理app资源非常重要的部分，View controllers 允许你把应用分成多个部分，然后你只需要实例化你需要的那部分。不止这些，view controller管理着不同的资源并在不同的时候实例化。例如，一个视图控制器的 视图层次(view hierarchy) 只有当view能被 获得(accessed) 才能被实例化，也就是说，只有当view 显示在屏幕上才会去实例化视图层次。如果有多个view视图被压入navigationController的栈中（navigation stack）。只有最上面一层view视图内容是可见的，这就意味着只有最上层的view视图 被获得（accessed）。类似的，如果一个view视图控制器没有被 navigation controller 呈现，view视图控制器旧没有必要去实例化它的navigation item。通过延迟大部分的资源分配，直到应用需要的时候，视图控制器会是用更少的资源。</p>
<p>当app的可获取内存变得很少的时候，所有的视图控制器会自动的被系统通知。通知视图控制器清理缓存和一些等内存充足时能被再次创建的对象。具体的运转情况根据允许在不同版本的iOS上而不同。</p>
<p>细心管理视图控制器相关的资源对于app有效率的运行是极为重要的。推荐使用 惰性分配（lazy allocation）：创建和维持代价很高的对象，要晚些时候再去分配（当需要使用的时候）。出于这个原因，视图控制器要把整个 视图控制器整个生命周期都要使用的对象 和 只有一些时候有必要使用的对象 分离开。当视图控制器接收到低内存警告通知的时候，如果view controller当前是不可见的，要减少内存使用。</p>
<h3 id="初始化_view_controller">初始化 view controller</h3><p>当一个view controller 是第一次被初始化，会创建或加载它整个生命都需要的对象。不应该去创建视图层面或和显示内容相关的对象。应该集中于 数据对象 和 需要实现关键性能的对象。</p>
<p>一般情况下，不要写复杂的初始化方法。相反，实现一个简单的初始化方法，然后提供视图控制器的属性。</p>
<h3 id="当视图控制器可被获得时，在初始化view_controller_的视图层次">当视图控制器可被获得时，在初始化view controller 的视图层次</h3><p>当应用程序的某些部分请求 view controller 的对象，该对象不是当前在内存中，view controller 加载视图层次到内存中，并将其存储在视图的属性中，好为以后的引用做准备。加载循环发生的步骤是：</p>
<ol>
<li>view controller 调用 loadView方法。loadView方法默认实现了 one of two things：<ul>
<li>如果 view controller 是和 storyboard 相关，它会从storyboard 中加载 view。</li>
<li>如果不是，则创建一个空的UIView对象并赋值给 view属性。</li>
</ul>
</li>
<li>view controller 调用 viewDidLoad方法，这使你的子类去执行任何额外的加载时任务（load-time task）。</li>
</ol>
<p>下图展示了load cycle，你可以根据需要覆盖 loadView方法 和 viewDidLoad方法。例如，如果app没有使用storyboard，但是你想在view视图中添加额外的views，就可以重写 loadView方法编程实现实例化那些views。</p>
<p>加载view到内存<br><img src="/img/view_controller_life_cycle/loading_a_view_into_memory_2x.png" alt="pic1"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>译自苹果开发文档，<a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ViewLoadingandUnloading/ViewLoadin]]>
    </summary>
    
      <category term="iOS" scheme="http://pascocoder.github.io/tags/iOS/"/>
    
      <category term="翻译" scheme="http://pascocoder.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS" scheme="http://pascocoder.github.io/categories/iOS/"/>
    
  </entry>
  
</feed>
